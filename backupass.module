<?php

function backupass_menu() {
  
    $items = array();

    $items['backupass']= array(
      'title' => 'Backup Assistant',
      'description' => t('Check your backup file'),
      'page callback' => 'backupass_main_form',
      'access arguments' => array("access backupass"),
      'file' => 'backupass.admin.inc',
      'type' => MENU_NORMAL_ITEM
    );

    $items['backupass/version']= array(
      'title' => 'Check Version',
      'description' => t('Check the version of a file.'),
      'page callback' => 'backupass_version',
      'access arguments' => array("access backupass"),
      'file' => 'backupass_version.inc',
      'type' => MENU_NORMAL_ITEM
    );
  
    $items['backupass/getfile'] = array(
      'title' => 'Getfile',
      'description' => '',
      'page callback' => 'backupass_getfile',
      'access arguments' => array("access backupass getfile"),
      'file' => 'backupass_getfile.inc',
      'type' => MENU_NORMAL_ITEM
    );
    
    $items['backupass/setting'] = array(
      'title' => 'Backupass setting',
      'description' => 'Set backup bath here',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('backupass_admin'),
      'access arguments' => array('access backupass setting'),
      'type' => MENU_NORMAL_ITEM,
     );
    
    $items['backupass/cleanup']= array(
      'title' => 'Clean up',
      'description' => t('Clean up all deleted file'),
      'page callback' => 'backupass_cleanup',
      'access arguments' => array("access backupass cleanup"),
      'file' => 'backupass_version.inc',
      'type' => MENU_NORMAL_ITEM
    );
    
    $items['backupass/userpath']= array(
      'title' => 'Set user path',
      'description' => t('Set user access right'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('backupass_userpath'),
      'access arguments' => array('access backupass setting'),
      'file' => 'backupass_userpath.inc',
      'type' => MENU_NORMAL_ITEM
    );
    
    $items['backupass/email']= array(
      'title' => 'Email',
      'description' => t('send email'),
      'page callback' => 'backupass_email',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM
    );
    
    return $items;
}

function backupass_permission() {
  $permissions = array(
    'access backupass setting' => array(
      'title' => t('Admin backupass'),
      'description' => t('Admin the setting of backupass.'),
    ),
    'access backupass cleanup' => array(
      'title' => t('Clear deleted file'),
      'description' => t('Clean up deleted file.'),
      //'restrict access' => TRUE,
    ),
    'access backupass' => array(
      'title' => t('Acess  backupass'),
      'description' => t('Access the backupass.'),
    ),
    'access backupass getfile' => array(
      'title' => t('Get file from backupass'),
      'description' => t('Get file from the backupass.'),
    ),
  );

  // Reset static cache to ensure all flag permissions are available.
  drupal_static_reset('flag_get_flags');
  $flags = flag_get_flags();
  // Provide flag and unflag permissions for each flag.
  foreach ($flags as $flag_name => $flag) {
    $permissions += $flag->get_permissions();
  }

  return $permissions;
}

function backupass_email()
{
    $content = array();
    if(isset($_GET["message"]) && $_GET["message"] != "")
    {
        global $language;
        $params['subject'] = t(variable_get('backupass_email_subject'));
        $params['body']    = array(t($_GET["message"]));
        drupal_mail('smtp', '', variable_get('backupass_admin_email'), $language, $params);
        drupal_set_message("email sent");
    }
    return $content;
}

function backupass_admin() {
  $form = array();

  $form['backupass_target_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Target path'),
    '#default_value' => variable_get('backupass_target_path', 'C:\ShareFolder'),
    '#size' => 100,
    '#maxlength' => 200,
    '#description' => t("The path we want to backup"),
    '#required' => TRUE,
  );

  $form['backupass_backup_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Backup path'),
    '#default_value' => variable_get('backupass_backup_path', 'D:\BackupFolder'),
    '#size' => 100,
    '#maxlength' => 200,
    '#description' => t("The path to store as a mirror"),
    '#required' => TRUE,
  );
  
  $form['backupass_archive_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Archive path'),
    '#default_value' => variable_get('backupass_archive_path', 'E:\ArchiveFolder'),
    '#size' => 100,
    '#maxlength' => 200,
    '#description' => t("Path save all file with version"),
    '#required' => TRUE,
  );
  
  $form['backupass_admin_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Administrator email'),
    '#default_value' => variable_get('backupass_admin_email'),
    '#size' => 30,
    '#maxlength' => 60,
    '#description' => t("Email of administrator, system message will send to this email."),
    '#required' => TRUE,
  );
  
  $form['backupass_email_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Email subject'),
    '#default_value' => variable_get('backupass_email_subject','Email from backupass'),
    '#size' => 30,
    '#maxlength' => 60,
    '#description' => t("Subject will be used when this system send out alert."),
    '#required' => TRUE,
  );
  
  $form['backupass_delete_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Clean deleted file in how many day(s)?'),
    '#default_value' => variable_get('backupass_delete_timeout', '30'),
    '#size' => 4,
    '#maxlength' => 6,
    '#description' => t("System will clean the file marked as deleted in backup and archive folder."),
    '#required' => TRUE,
  );
  
  /*
  $form['backupass_next_execution'] = array(
    '#type' => 'textfield',
    '#title' => t('Next corn job?'),
    '#default_value' => variable_get('backupass_next_execution', '30'),
    '#size' => 100,
    '#maxlength' => 200,
    '#description' => t("System will clean the file marked as deleted in backup and archive folder."),
    '#required' => TRUE,
  );
  */
  
  $form = system_settings_form($form);
  $form['link'] = array(
      '#type' => 'item',
      '#title' => t('Clean deleted file manually'),
      '#markup' => l(t('Force clean deleted file'),'backupass/cleanup',array(
            'attributes' => array(
            'onclick' => 'if(!confirm("Really Delete?")){return false;}',
            ),
          'query' => array('forcestart' => 'y'),
      )),
      //'#attributes' => array('onclick' => 'if(!confirm("Really Delete?")){return false;}'),
      );
  return $form;
}

function backupass_main_form()
{
    $output = array();
    $output['filter'] = drupal_get_form('backupass_form_filter');
    $output['tableform'] = drupal_get_form('backupass_form');
    return $output;
}

function backupass_cleanup()
{
    $output = array();
    if(isset($_GET["forcestart"]) && $_GET["forcestart"])
    {
        $sql = db_select("ba_filelist","f");
        $sql->fields("f",array('fileid', 'sourcepath', 'parentpath', 'filepath'));
        $sql->condition("deletedby","","<>");
    }
    else
    {
        $sql = db_select("ba_filelist","f");
        $sql->fields("f",array('fileid', 'sourcepath', 'parentpath', 'filepath'));
        $sql->condition("deletedby","","<>");
        $sql->where("deletedtime + INTERVAL ".variable_get('backupass_delete_timeout',30)." DAY < now()");
    }
    //drupal_set_message($sql);
    $results = $sql->execute();
    foreach($results as $row)
    {
        drupal_set_message("Delete file:".$row->fileid." ".$row->sourcepath.$row->parentpath."/".$row->filepath);
        file_unmanaged_delete(variable_get('backupass_target_path').$row->parentpath."/".$row->filepath);
        file_unmanaged_delete(variable_get('backupass_backup_path').$row->parentpath."/".$row->filepath);
        $sqla = db_select("ba_file_archive","a");
        $sqla->fields("a",array('fileid','path'));
        $sqla->condition("a.fileid",$row->fileid,"=");
        $archivefile = $sqla->execute();
        foreach($archivefile as $file)
        {
            drupal_set_message("Delete archive file:".$file->path);
            file_unmanaged_delete($file->path);
        }
        db_delete("ba_file_archive")->condition("fileid",$row->fileid,"=")->execute();
        db_delete("ba_filelist")->condition("fileid",$row->fileid,"=")->execute();
    }
    
    return $output;
}

function backupass_cron() {
  watchdog('backupass', 'backupass ran');
  backupass_cleanup();
}
/*
function backupass_admin_submit($form, &$form_state)
{
    dsm($form_state);
}
*/
